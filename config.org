#+TITLE: My Emacs Configuration
#+AUTHOR: Ryan Himmelwright
#+EMAIL: ryan@himmelwright.net
#+OPTIONS: num:nil 
So I just learned about the org babel stuff, and I think I might save
my emacs configuration in an org file like this, and then have emacs
just load it with org-babel... It deff makes it easier to navigate
around the file...
* Repos & Core Packages
** Melpa 
Melpa is the big package repo that nearly /everything/ can be
found. It's a must for emacs configs.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
#+END_SRC
** Setup =use-package= if isn't already
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC
** Auto-compile
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :ensure t)
#+END_SRC
* Core Setup
** Basic Stuff
#+END_SRC
*** Splash Screen
Remove splash screen and use *scratch* instead as the home buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC

*** Line Numbers
Switch line numbers on by default in all buffers
#+BEGIN_SRC emacs-lisp
;;(global-linum-mode 1)
#+END_SRC

*** Menu Bar
Switch the Menubar off by default (I like to keep everything clean)
#+BEGIN_SRC emacs-lisp
 (menu-bar-mode -1)
#+END_SRC

... but still let me easily toggle it on/off
#+BEGIN_SRC emacs-lisp
;; Toggle menubar keybind
(global-set-key (kbd "C-c m") 'menu-bar-mode)
#+END_SRC
*** Scroll Bar
Remove Scroll Bars
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

*** Tool Bar
Remove Tool Bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

*** New Line indent
New lines auto indents
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "RET")
  'newline-and-indent)
#+END_SRC

*** Tool Tips
Tool Tips in echo area
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq tooltip-use-echo-area t)
#+END_SRC

*** Smooth Scrolling

*** Make Esc global quit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
*** Shorter yes/no
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
    
** Themes
** Fonts
Set default font
#+BEGIN_SRC emacs-lisp
(set-default-font "Monospace-11")
#+END_SRC

#+RESULTS:

* Evil Modefixed

Here is my Evile Mode setup. I've nested other ~use-pacages~ inside of
it, so that if I am using =evil=, the packages that depend on it go
ahead and configure themselves.

#+BEGIN_SRC emacs-lisp
;; Evil Mode
(use-package evil
  :ensure t
  :config

  (evil-mode 1)
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode t)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "s s" 'swiper
      "d x w" 'delete-trailing-whitespace)) 

  (use-package evil-surround
    :ensure t
    :config (global-evil-surround-mode))

  (use-package evil-indent-textobject
    :ensure t)

  (use-package evil-org
    :ensure t
    :config
    (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))
    (add-hook 'org-mode-hook (lambda () (evil-org-mode))))

  (use-package powerline-evil
    :ensure t
    :config
    (powerline-evil-vim-color-theme)
    )
  )
#+END_SRC
* Development
** Git
I use magit for easy git management
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind 
    (("C-c g"     . 'magit-status)
     ("C-c C-p"   . 'magit-push)))
#+END_SRC

* Ivy
Setup and use Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; Ivy Keybindings
  (global-set-key (kbd "C-c C-r") 'ivy-resume))
#+END_SRC

Configure Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :config
  (global-set-key "\C-s" 'swiper)
  )
#+END_SRC

Counsel configuration
#+BEGIN_SRC emacs-lisp
(use-package counsel 
  :ensure t
  :config 
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file))
#+END_SRC

* Key Bindings
These will eventually be relocations to just be included with their
respective ~use-package~ calls...
*** Escape to jj
#+BEGIN_SRC emacs-lisp
(defun xwl-jj-as-esc ()
  (interactive)
  (if (memq evil-state '(insert replace))
      (let ((changed? (buffer-modified-p)))
          (insert "j")
          (let* ((tm (current-time))
                 (ch (read-key)))
            (if (and (eq ch ?j)
                     (< (time-to-seconds (time-since tm)) 0.5))
                (save-excursion
                  (delete-char -1)
                  (evil-force-normal-state)
                  (set-buffer-modified-p changed?))
              (insert ch))))
    (call-interactively 'evil-next-line)))

(define-key evil-insert-state-map  "j" 'xwl-jj-as-esc)
(define-key evil-replace-state-map "j" 'xwl-jj-as-esc)
#+END_SRC

#+RESULTS:
: xwl-jj-as-esc

*** Eshell
#+BEGIN_SRC emacs-lisp
  ;; Eshell launch keybind
  (global-set-key (kbd "C-c t") 'eshell)

  ;; Comment/Uncomment region
  (global-set-key (kbd "C-c ;") 'comment-region)

  ;; Comment/Uncomment region
  (global-set-key (kbd "C-c s") 'org-edit-src-code)
#+END_SRC

* Writting
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t)
#+END_SRC
** Spell Check
I use ispell for spell checking. The actual libraries are set
depending on the system (in my [[emacs-linux.el][./emacs-linux.el]] and [[emacs-work.el][./emacs-work.el]]
files).

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure t
  :bind
  (("C-c w" . 'ispell-word)
   ("C-c r" . 'ispell-region)))
#+END_SRC
** Word Count
#+BEGIN_SRC emacs-lisp
(use-package wc-mode
  :ensure t)
#+END_SRC
** Auto word wrap
Automatically wrap my lines:

Removed default on for now... it's actaully annoying for most
things. I'll eventually figure out /which/ minor modes I want it on by
default in and add those hooks here. I also left the setup command
commented so I can default it to on again easily in the future if I
want.

#+BEGIN_SRC emacs-lisp  
  (use-package aggressive-fill-paragraph
    :ensure t
    :config
    ;;(afp-setup-recommended-hooks)
    )
#+END_SRC
* Org Mode Stuff
** Aesthetics, customizations
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar  ;; Improved version of org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
    
  (setq org-startup-indented t)           ;; Indent according to section
  (setq org-startup-with-inline-images t) ;; Display images in-buffer by default
#+END_SRC

** Ob-Ipython
#+BEGIN_SRC emacs-lisp
   (require 'ob-ipython)
   ;don't prompt me to confirm everytime I want to evaluate a block
   (setq org-confirm-babel-evaluate nil)
    ; display/update images in the buffer after I evaluate
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
    
#+END_SRC

#+RESULTS:
| org-display-inline-images |

** Org Mode
Yes. It get's it's own section. Again, I've nested everything. I might
break that up though now if I the babel stuff to generate my
configs...
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
    ;; Make sure org file code highlights correctly
    (setq org-src-fontify-natively t)
    (setq org-todo-keywords '(
;;(sequence "TODO" "In Progress" "|" "Waiting" "DONE" "Completed")
			      (sequence "Queue" "Working On" "On Hold" "|" "Finished" "Worked On" "Removed")))

    (evil-leader/set-key-for-mode 'org-mode
      "m i" 'org-clock-in
      "m C" 'org-toggle-checkbox
      "m o" 'org-clock-out
      "m c" 'org-clock-jump-to-current-clock
      "m d" 'org-clock-display
      "m e" 'org-set-effort
      "m p" 'org-pomodoro
      "m t" 'org-set-tags-command
      "m m" 'org-clock-modify-effort-estimate
      "m s" 'org-schedule)

    ;; ;; Org Agenda stuff
;;    (setq org-agenda-files '("~/nextcloud/emacs/org/archive/work.org"))

    (defun org-code (start end)
      "Wraps selected text with org code tags"
      (interactive "r")
      (let ((selected-text (buffer-substring (mark) (point)))
	    (db-name (read-from-minibuffer "Language[common-lisp]: ")))
	(when (eq db-name "")
	  (setf db-name "common-lisp"))
	(kill-region start end)
	(insert (format "#+BEGIN_SRC %s \n%s \n#+END_SRC" db-name selected-text))))

    (use-package org-pomodoro
      :ensure t
      :config
      ;; Persistent Clocking
      (setq org-clock-persist 'history)
      (org-clock-persistence-insinuate)

      ;; Default Table Params
      (setq org-clock-clocktable-default-properties '(:maxlevel 3 :scope subtree :tags "-Lunch"))


      ;; Org Pomodoro ;;
      ;; Setup pomodoro timer keybind
      (global-set-key (kbd "C-S-c C-S-p") 'org-pomodoro)
      (global-set-key (kbd "C-S-c C-S-e") 'org-pomodoro-extend-last-clock)

      (defun org-pomodoro-get-times ()
	(interactive)
	(message "work length: %s  short break: %s  long break: %s"
		 org-pomodoro-length
		 org-pomodoro-short-break-length
		 org-pomodoro-long-break-length))

      (defun org-pomodoro-set-pomodoro ()
	(interactive)
	(setf org-pomodoro-length 25)
	(setf org-pomodoro-short-break-length 5)
	(setf org-pomodoro-long-break-length 15))


      (org-pomodoro-set-pomodoro)

      (defun org-pomodoro-set-52-17 ()
	(interactive)
	(setf org-pomodoro-length 52)
	(setf org-pomodoro-short-break-length 17)
	(setf org-pomodoro-long-break-length 17)))
    )

#+END_SRC

Htmlize to export my org files to web pages:

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC

Add org-clock times into a ~:LOGBOOK:~ drawer.
#+BEGIN_SRC emacs-lisp
  (setq org-clock-into-drawer t)
#+END_SRC

Org Agenda open in current window
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'current-window)
#+END_SRC
** Org-Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ipython . t)
   (python . t)
     ;; other languages..
     ))
#+END_SRC

#+RESULTS:

** Org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
   (org-roam-directory (file-truename "~/roam"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+END_SRC

#+RESULTS:
: org-roam-dailies-capture-today
* My Random Functions
** eshell-clear-buffer
Clears my eshell more like a normal terminal would
#+BEGIN_SRC emacs-lisp
(defun eshell-clear-buffer ()
  "Clear terminal"
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
#+END_SRC

I need this hook for the function, and I like to set it to a keybind:
#+BEGIN_SRC emacs-lisp
(add-hook 'eshell-mode-hook
	  '(lambda()
	     (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

(global-set-key (kbd "C-c <delete>") 'eshell-clear-buffer)
#+END_SRC

** Timestamp
#+BEGIN_SRC emacs-lisp
(defun now ()
  (interactive) ; permits invocation in minibufer
  (insert (format-time-string "%e.%-m.%Y %a %H:%M")))
#+END_SRC
* YASnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/snippets"))
    (yas-global-mode 1))
#+END_SRC

#+RESULTS:
: t

