#+STARTUP: overview 
* Interface Tweaks
** Startup, general settings
#+BEGIN_SRC emacs-lisp
  ;; Remove initial buffer, set index file
  (setq inhibit-startup-message t)
  (setq initial-buffer-choice "index.org")
  
  ;; Hide Scroll bar,menu bar, tool bar
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  ;; (menu-bar-mode -1)
  
  ;; Theme
  (load-theme 'wombat)
  
  ;; Font stuff
  (set-face-attribute 'default nil
   :family "JetBrains Mono"
   :height 110
   :weight 'regular)
  (set-face-attribute 'variable-pitch nil
   :family "JetBrains Mono"
   :height 1.0)
  (set-face-attribute 'fixed-pitch nil
   :family "JetBrains Mono"
   :height 1.0)
  
  ;; Line numbering
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type t)
  
  ;; Misc stuff
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setenv "HOME" "/home/mlboy/")
#+END_SRC

#+RESULTS:

** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config 
    (setq which-key-idle-delay 0.3)
    (setq which-key-popup-type 'frame)
    (which-key-mode)
    (which-key-setup-minibuffer)
    (set-face-attribute 'which-key-local-map-description-face nil 
       :weight 'bold)
  :ensure t)
#+END_SRC

** Helm for navigation
#+BEGIN_SRC emacs-lisp
(use-package helm
  :init
    (require 'helm-config)
    (setq helm-split-window-in-side-p t
          helm-move-to-line-cycle-in-source t)
  :config 
    (helm-mode 1) ;; Most of Emacs prompts become helm-enabled
    (helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates
    (global-set-key (kbd "C-x b") 'helm-buffers-list) ;; List buffers ( Emacs way )
    (define-key evil-ex-map "b" 'helm-buffers-list) ;; List buffers ( Vim way )
    (global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu
    (global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Finding files with Helm
    (define-key helm-map (kbd "C-j") 'helm-next-line)
    (define-key helm-map (kbd "C-k") 'helm-previous-line)
    (global-set-key (kbd "M-c") 'helm-calcul-expression) ;; Use Helm for calculations
    (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding
    (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
    (global-set-key (kbd "M-x") 'helm-M-x)  ;; Improved M-x menu
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to paste
  :ensure t)
#+END_SRC

#+RESULTS:
: t
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC
** Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :config
  (elpy-enable))
#+END_SRC

* My custom functions
** Timestamp
#+BEGIN_SRC emacs-lisp
(defun now ()
  (interactive) ; permits invocation in minibufer
  (insert (format-time-string "%e.%-m.%Y %a %H:%M")))
#+END_SRC
* Org Mode Stuff
** Aesthetics, customizations
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar  ;; Improved version of org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
    
  (setq org-startup-indented t)           ;; Indent according to section
  (setq org-startup-with-inline-images t) ;; Display images in-buffer by default
#+END_SRC

** Evil-org for evil-mode integration
This is very fancy, it treats org-mode elements (i.e. sections, source blocks, tables)
as regular text objects ( 'ae' object ). Additionally, it allows reordering stuff using
M-j, M-k, M-l and M-h instead of the regular M-<arrow keys>.
Operators that deal with indentation ( < and > ) also indent headers.
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :after (evil org)
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

#+RESULTS:
: t

** Org-agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
   '(("h" "Daily habits"
      ((agenda ""))
      ((org-agenda-show-log t)
       (org-agenda-ndays 1)
       (org-agenda-log-mode-items '(state))
       (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":DAILY:"))))))
#+END_SRC

#+RESULTS:
| h | Daily habits | ((agenda )) | ((org-agenda-show-log t) (org-agenda-ndays 1) (org-agenda-log-mode-items (quote (state))) (org-agenda-skip-function (quote (org-agenda-skip-entry-if (quote notregexp) :DAILY:)))) |

** Org-babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))
#+END_SRC

#+RESULTS:

** Org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
   (org-roam-directory (file-truename "~/roam"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+END_SRC

#+RESULTS:
: org-roam-dailies-capture-today
